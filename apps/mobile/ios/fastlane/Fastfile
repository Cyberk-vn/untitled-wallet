# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  def check_version(version)
    if (version =~ /^\d+.\d+.\d+$/) != 0
      UI.user_error!("Invalid version #{version}")
    end
  end

  def check_codepush_version(version)
    if (version =~ /^(\d+.\d+.\d+)-codepush.\d+$/) != 0
      UI.user_error!("Invalid codepush version #{version}")
    end

    v = version.split(/^(\d+.\d+.\d+)-codepush.\d+$/)[1]
    if v.length == 0
      UI.user_error!("Unexpected error #{version}")
    end

    return v
  end

  lane :deploy_codepush do |options|
    if options[:version]
      version = options[:version]
    else
      version = prompt(text: "Enter the target version\n(Ex. 1.0.0-codepush.1): ")
    end

    target_version = check_codepush_version(version)

    UI.message("Code push will be deployed for IOS #{target_version}. Code Bundle ID: #{version}")

    if !ENV["CODEPUSH_SECRET"] || ENV["CODEPUSH_SECRET"].length == 0
      UI.user_error!("CODEPUSH_SECRET is not provided")
    end

    if !ENV["CODEPUSH_API_KEY"] || ENV["CODEPUSH_API_KEY"].length == 0
      UI.user_error!("CODEPUSH_API_KEY is not provided")
    end

    if !ENV["BUGSNAG_API_KEY"] || ENV["BUGSNAG_API_KEY"].length == 0
      UI.user_error!("BUGSNAG_API_KEY is not provided")
    end

    sh("cd ../.. && sh ./scripts/prepare-ios-deploy.sh #{ENV["CODEPUSH_SECRET"]} #{ENV["CODEPUSH_API_KEY"]} #{ENV["BUGSNAG_API_KEY"]} #{target_version} #{version}")

    # A problem may have occurred due to the above step. So, check the typing error.
    sh("cd ../.. && yarn typecheck")

    sh("cd ../.. && npx -p appcenter-cli appcenter codepush release-react -a #{ENV["IOS_APPCENTER_APP_NAME"]} -d Production -t #{target_version} --output-dir build --sourcemap-output build/CodePush/main.jsbundle.map")
    sh("cd ../.. && npx -p @bugsnag/source-maps bugsnag-source-maps upload-react-native --api-key #{ENV["BUGSNAG_API_KEY"]} --code-bundle-id #{version} --platform ios --source-map build/CodePush/main.jsbundle.map --bundle build/CodePush/main.jsbundle")
  end

  desc "Push a new beta build to TestFlight"
  lane :deploy do |options|
    app_store_connect_api_key(
      key_id: ENV["APPLE_KEY_ID"],
      issuer_id: ENV["APPLE_ISSUER_ID"],
      key_filepath: ENV["APPLE_KEY_FILEPATH"],
      duration: 1200,
      in_house: false
    )

    apple_id = ENV["APPLE_ID"]
    itc_team_id = ENV["ITC_TEAM_ID"]
    team_id = ENV["TEAM_ID"]

    if options[:version]
      version = options[:version]
    else
      version = prompt(text: "Enter the version type or specific version\n(Ex. 1.0.0): ")
    end

    check_version(version)

    if !ENV["CODEPUSH_SECRET"] || ENV["CODEPUSH_SECRET"].length == 0
      UI.user_error!("CODEPUSH_SECRET is not provided")
    end

    if !ENV["CODEPUSH_API_KEY"] || ENV["CODEPUSH_API_KEY"].length == 0
      UI.user_error!("CODEPUSH_API_KEY is not provided")
    end

    if !ENV["BUGSNAG_API_KEY"] || ENV["BUGSNAG_API_KEY"].length == 0
      UI.user_error!("BUGSNAG_API_KEY is not provided")
    end

    sh("cd ../.. && sh ./scripts/prepare-ios-deploy.sh #{ENV["CODEPUSH_SECRET"]} #{ENV["CODEPUSH_API_KEY"]} #{ENV["BUGSNAG_API_KEY"]} #{version}")

    # A problem may have occurred due to the above step. So, check the typing error.
    sh("cd ../.. && yarn typecheck")

    create_keychain(
      name: ENV["KEYCHAIN_NAME"],
      password: ENV["KEYCHAIN_PASSWORD"],
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      lock_when_sleeps: false
    )

    match_git_url = ENV["MATCH_GIT_URL"]

    match(
      type: "appstore",
      username: ENV["APPLE_USERNAME"],
      team_id: team_id,
      git_url: match_git_url,
      git_full_name: ENV["GIT_FULL_NAME"],
      git_user_email: ENV["GIT_USER_EMAIL"],
      keychain_name: ENV["KEYCHAIN_NAME"],
      keychain_password: ENV["KEYCHAIN_PASSWORD"],
      clone_branch_directly: true,
      verbose: true,
    )

    increment_version_number(
      xcodeproj: "titanmobile.xcodeproj",
      version_number: version,
    )

    build_number = latest_testflight_build_number(
      team_id: team_id,
    ) + 1
    UI.message("Build number will be #{build_number}")
    increment_build_number(
      xcodeproj: "titanmobile.xcodeproj",
      build_number: build_number,
    )

    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    mapping = Actions.lane_context[
      SharedValues::MATCH_PROVISIONING_PROFILE_MAPPING
    ]
    update_code_signing_settings(
      use_automatic_signing: false,
      profile_name: mapping[app_identifier],
      code_sign_identity: "Apple Distribution",
    )

    build_app(workspace: "titanmobile.xcworkspace", scheme: "mobile")

    # Reinit api key (Possibly, building app can take more than 20min)
    app_store_connect_api_key(
      key_id: ENV["APPLE_KEY_ID"],
      issuer_id: ENV["APPLE_ISSUER_ID"],
      key_filepath: ENV["APPLE_KEY_FILEPATH"],
      duration: 1200,
      in_house: false
    )

    upload_to_testflight(
      apple_id: apple_id,
      team_id: team_id,
      app_identifier: "com.chainapsis.titanwallet",
      skip_submission: true
    )

    sh("cd .. && curl --http1.1 https://upload.bugsnag.com/ -F apiKey=#{ENV["BUGSNAG_API_KEY"]} -F dsym=@titanmobile.app.dSYM.zip")
  end
end
